# Code files
[*.{cs,csx,vb,vbx,razor,html,htm,js,md,cshtml,xaml,vbhtml,aspx,txt,asax,ashx,asmx,master,config}]
charset = utf-8-bom

[*.cs]

# BannedApiAnalyzers
dotnet_diagnostic.RS0030.severity = error

# CA1304: Specify CultureInfo
dotnet_diagnostic.CA1304.severity = error

# CA1305: Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = error

# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = error

# CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = error

# CA1309: Use ordinal string comparison
dotnet_diagnostic.CA1309.severity = error

# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = error

# CA1311: Specify a culture or use an invariant version
dotnet_diagnostic.CA1311.severity = error

# CA1510: Use 'ArgumentNullException. ThrowIfNull' instead of explicitly throwing a new exception instance
dotnet_diagnostic.CA1510.severity = suggestion

# CA1512: Use 'ArgumentOutOfRangeException. ThrowIfNegativeOrZero' instead of explicitly throwing a new exception instance
dotnet_diagnostic.CA1512.severity = suggestion

# CA1513: Use 'ObjectDisposedException. ThrowIf' instead of explicitly throwing a new exception instance
dotnet_diagnostic.CA1513.severity = suggestion

# CA1820: Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = error

# CA1834: Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1834.severity = error

# CA1858: Use 'StartsWith' instead of 'IndexOf'
dotnet_diagnostic.CA1858.severity = error

# CA2249: Consider using 'string.Contains' instead of 'string.IndexOf'
dotnet_diagnostic.CA2249.severity = error

# CA2251: Use 'string.Equals'
dotnet_diagnostic.CA2251.severity = error

# CA1031: Modify to catch a more specific allowed exception type, or rethrow the exception
dotnet_diagnostic.CA1031.severity = suggestion

# Do not declare visible instance fields
dotnet_diagnostic.CA2211.severity = suggestion
dotnet_diagnostic.CA1051.severity = suggestion

# CA1034: Do not nest type. Alternatively, change its accessibility so that it is not externally visible.
dotnet_diagnostic.CA1034.severity = suggestion

# CA2227: Change it to be read-only by removing the property setter
dotnet_diagnostic.CA2227.severity = suggestion

# CA1308: In method X, replace the call to 'ToLower' with 'ToUpperInvariant'
dotnet_diagnostic.CA1308.severity = suggestion

# CA1002: Change 'List ' to use 'Collection ', 'ReadOnlyCollection ' or 'KeyedCollection '
dotnet_diagnostic.CA1002.severity = suggestion

# CA1816: Change it to call GC.SuppressFinalize(object). This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.
# CA1063: Modify it so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns
dotnet_diagnostic.CA1816.severity = suggestion
dotnet_diagnostic.CA1063.severity = suggestion

# CA2234: Modify ir to call Uri
dotnet_diagnostic.CA2234.severity = suggestion

# CA1707: Remove the underscores from member name
dotnet_diagnostic.CA1707.severity = suggestion

# CA1044: Because property X is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method
dotnet_diagnostic.CA1044.severity = suggestion

# CA1805: Member X is explicitly initialized to its default value
dotnet_diagnostic.CA1805.severity = suggestion

# CA1845: Use span-based 'string. Concat' and 'AsSpan' instead of 'Substring'
dotnet_diagnostic.CA1845.severity = suggestion

# CA1708: Names of 'Members' should differ by more than case
dotnet_diagnostic.CA1708.severity = suggestion

# CA1001: Type X owns disposable field(s) but is not disposable
dotnet_diagnostic.CA1001.severity = suggestion

# CA1823: Unused field X
dotnet_diagnostic.CA1823.severity = suggestion

# CA1846: Prefer 'AsSpan' over 'Substring' when span-based overloads are available
dotnet_diagnostic.CA1846.severity = suggestion

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = suggestion

# CA1036: X should define operator(s) '==, !=, , =, >, >=' and Equals since it implements IComparable
dotnet_diagnostic.CA1036.severity = suggestion

# CA1814: initialize uses a multidimensional array of int[*,*]. Replace it with a jagged array if possible.
dotnet_diagnostic.CA1814.severity = suggestion

# CA1850: Prefer static 'System. Security. Cryptography. SHA1.HashData' method over 'ComputeHash'
dotnet_diagnostic.CA1850.severity = suggestion

# CA2000: Use recommended dispose pattern to ensure that object created
dotnet_diagnostic.CA2000.severity = suggestion

# CA1711: Rename type name XCollection so that it does not end in 'Collection'
dotnet_diagnostic.CA1711.severity = suggestion

# CA1810: Initialize all static fields in X when those fields are declared and remove the explicit static constructor
dotnet_diagnostic.CA1810.severity = suggestion

# CA1819: Properties should not return arrays
dotnet_diagnostic.CA1819.severity = suggestion

# CA5394: Random is an insecure random number generator
dotnet_diagnostic.CA5394.severity = suggestion

# CA1710: Rename X to end in 'Stream'
dotnet_diagnostic.CA1710.severity = suggestion

# CA1054: Change the type of parameter 'url' of method  from 'string' to 'System.Uri'
dotnet_diagnostic.CA1054.severity = suggestion

# CA2213: X contains field Y that is of IDisposable 
dotnet_diagnostic.CA2213.severity = suggestion

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = suggestion

# CA1721: The property name 'Tokeniser' is confusing given the existence of method 'GetTokeniser'. Rename or remove one of these members.
dotnet_diagnostic.CA1721.severity = suggestion

# CA1720: Identifier 'STRING' contains type name
dotnet_diagnostic.CA1720.severity = suggestion

# CA5350: GetEncodedPkcs7 uses a weak cryptographic algorithm SHA1
dotnet_diagnostic.CA5350.severity = suggestion

# CA1508: 'Tokens.TokenType.Equals(PrTokeniser.TK_NUMBER)' is always 'true'. Remove or refactor the condition(s) to avoid dead code.
dotnet_diagnostic.CA1508.severity = suggestion

# CA1040: Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = suggestion

# CA2249: Use 'string. Contains' instead of 'string. IndexOf' to improve readability
dotnet_diagnostic.CA2249.severity = suggestion

# CA5351: Create uses a broken cryptographic algorithm MD5
dotnet_diagnostic.CA5351.severity = suggestion

# CA1043: Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1043.severity = suggestion

# CA1716: Rename virtual/interface member DocWriter.Resume() so that it no longer conflicts with the reserved language keyword 'Resume'. 
dotnet_diagnostic.CA1716.severity = suggestion

# CA1055: Change the return type of method 'Utilities.UnEscapeUrl(string)' from 'string' to 'System.Uri'
dotnet_diagnostic.CA1055.severity = suggestion

# CA2237: Add [Serializable] to NullValueDictionary as this type implements ISerializable
dotnet_diagnostic.CA2237.severity = suggestion

# CA1852 Type 'GifFrame' can be sealed because it has no subtypes in its containing assembly and is not externally visible
dotnet_diagnostic.CA1852.severity = suggestion

# CA1724 The type name Hyphenation conflicts in whole or in part with the namespace name 'iTextSharp.text.pdf.hyphenation'. Change either name to eliminate the conflict.
dotnet_diagnostic.CA1724.severity = suggestion

# Inline Variable Declaration
dotnet_diagnostic.IDE0018.severity = warning

# Use Pattern Matching to Avoid `As` Followed by A `Null` Check
dotnet_diagnostic.IDE0019.severity = warning

# Remove Unnecessary Using Directives
dotnet_diagnostic.IDE0005.severity = warning

# Remove Unnecessary Casts
dotnet_diagnostic.IDE0004.severity = warning

# Use readonly Modifier
dotnet_diagnostic.IDE0044.severity = warning

# SYSLIB0014: Method 'System.Net.WebRequest.Create(Uri)' is obsolete: 'WebRequest, HttpWebRequest, ServicePoint, and WebClient are obsolete. Use HttpClient instead.'
dotnet_diagnostic.SYSLIB0014.severity = suggestion


# S125 : Remove this commented out code.
dotnet_diagnostic.S125.severity = suggestion

# MA0026 : TODO Evaluate the effect of this.
dotnet_diagnostic.MA0026.severity = suggestion

# S1135 : Complete the task associated to this 'TODO' comment.
dotnet_diagnostic.S1135.severity = suggestion

# S4663 : Remove this empty comment
dotnet_diagnostic.S4663.severity = suggestion

# S108: Either remove or fill this block of code.
dotnet_diagnostic.S108.severity = suggestion

# S1104 : Make this field 'private' and encapsulate it in a 'public' property.
dotnet_diagnostic.S1104.severity = suggestion

# MA0051 : Method is too long
dotnet_diagnostic.MA0051.severity = suggestion

# S1764: Correct one of the identical expressions on both sides of operator '&&'.
dotnet_diagnostic.S1764.severity = suggestion

# MA0056 : Do not call overridable members in constructor
dotnet_diagnostic.MA0056.severity = suggestion

# S1121 : Extract the assignment of 't' from this expression.
dotnet_diagnostic.S1121.severity = suggestion

# S127: Do not update the loop counter 'k' within the loop body.
dotnet_diagnostic.S127.severity = suggestion

# S4143 : Verify this is the index/key that was intended; 
dotnet_diagnostic.S4143.severity = suggestion

# S2486 : Handle the exception or explain in a comment why it can be ignored.
dotnet_diagnostic.S2486.severity = suggestion

# S1066: Merge this if statement with the enclosing one.
dotnet_diagnostic.S1066.severity = suggestion

#S1854 : Remove this useless assignment to local variable
dotnet_diagnostic.S1854.severity = suggestion

# S1871: Either merge this case with the identical one on line x or change one of the implementations.
dotnet_diagnostic.S1871.severity = suggestion

# S3400: Remove this method and declare a constant for this value.
dotnet_diagnostic.S3400.severity = suggestion

# S2292: Make this an auto-implemented property and remove its backing field.
dotnet_diagnostic.S2292.severity = suggestion

# S1144 : Remove the unused private field
dotnet_diagnostic.S1144.severity = suggestion

# S907: Remove this use of 'goto'.
dotnet_diagnostic.S907.severity = suggestion

# S4275 : Refactor this getter so that it actually refers to the field
dotnet_diagnostic.S4275.severity = suggestion

# S4487: Remove this unread private field or refactor the code to use its value.
dotnet_diagnostic.S4487.severity = suggestion

# S3887: Use an immutable collection or reduce the accessibility of the non-private readonly field
dotnet_diagnostic.S3887.severity = suggestion

# S2386: Use an immutable collection or reduce the accessibility of the public static field.
dotnet_diagnostic.S2386.severity = suggestion

# S1940: Use the opposite operator ('!=') instead.
dotnet_diagnostic.S1940.severity = suggestion

# S3241: Change return type to 'void'; not a single caller uses the returned value.
dotnet_diagnostic.S3241.severity = suggestion

# S1199: Extract this nested code block into a separate method.
dotnet_diagnostic.S1199.severity = suggestion

# S1481: Remove the unused local variable.
dotnet_diagnostic.S1481.severity = suggestion

# S1075 : Refactor your code not to use hardcoded absolute paths or URIs.
dotnet_diagnostic.S1075.severity = suggestion

# MA0037 : Remove empty statement
dotnet_diagnostic.MA0037.severity = suggestion

# S2376: Provide a getter
dotnet_diagnostic.S2376.severity = suggestion

# S1450: Remove the field and declare it as a local variable in the relevant methods.
dotnet_diagnostic.S1450.severity = suggestion

# S3604: Remove the member initializer, all constructors set an initial value for the member.
dotnet_diagnostic.S3604.severity = suggestion

# S1116: Remove this empty statement.
dotnet_diagnostic.S1116.severity = suggestion

# S1168 : Return an empty collection instead of null.
dotnet_diagnostic.S1168.severity = suggestion

# S1264 : Replace this 'for' loop with a 'while' loop.
dotnet_diagnostic.S1264.severity = suggestion

# S3237: Use the 'value' contextual keyword in this property set accessor declaration.
dotnet_diagnostic.S3237.severity = suggestion

# S4136: All method overloads should be adjacent.
dotnet_diagnostic.S4136.severity = suggestion

# S2368: Make this method private or simplify its parameters to not use multidimensional/ jagged arrays.
dotnet_diagnostic.S2368.severity = suggestion

# S1186: Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.
dotnet_diagnostic.S1186.severity = suggestion

# S1699: Remove this call from a constructor to the overridable method.
dotnet_diagnostic.S1699.severity = suggestion

# S3881: Fix this implementation of 'IDisposable' to conform to the dispose pattern.
dotnet_diagnostic.S3881.severity = suggestion

# MA0016: Prefer using collection abstraction instead of implementation
dotnet_diagnostic.MA0016.severity = suggestion

# S2223: Change the visibility or make it 'const' or 'readonly'.
dotnet_diagnostic.S2223.severity = suggestion

# MA0069: Non-constant static fields should not be visible
dotnet_diagnostic.MA0069.severity = suggestion

# MA0097: A class that implements IComparable<T> or IComparable should override comparison operators
dotnet_diagnostic.MA0097.severity = suggestion

# S1210: When implementing IComparable, you should also override Equals, ==, !=, <, <=, >, and >=.
dotnet_diagnostic.S1210.severity = suggestion

# S4144: Update this method so that its implementation is not identical to X.
dotnet_diagnostic.S4144.severity = suggestion

# S2094: Remove this empty class, write its code or make it an "interface".
dotnet_diagnostic.S2094.severity = suggestion

# S3963: Initialize all 'static fields' inline and remove the 'static constructor'.
dotnet_diagnostic.S3963.severity = suggestion

# S3458: Remove this empty 'case' clause.
dotnet_diagnostic.S3458.severity = suggestion

# S2183: Remove this useless shift by 0.
dotnet_diagnostic.S2183.severity = suggestion

# S1172: Remove this unused method parameter.
dotnet_diagnostic.S1172.severity = suggestion

# MA0015: Use an overload of 'System. ArgumentException' with the parameter name
dotnet_diagnostic.MA0015.severity = suggestion

# S2692: 0 is a valid index, but this check ignores it.
dotnet_diagnostic.S2692.severity = suggestion

# S927: Rename parameter 'refi' to 'piRef' to match the base class declaration.
dotnet_diagnostic.S927.severity = suggestion

# S1643: Use a StringBuilder instead.
dotnet_diagnostic.S1643.severity = suggestion

# S3256 : Use 'string.IsNullOrEmpty()' instead of comparing to empty string.
dotnet_diagnostic.S3256.severity = suggestion

# S2328: Refactor 'GetHashCode' to not reference mutable fields.
dotnet_diagnostic.S2328.severity = suggestion

# S3267: Loops should be simplified using the "Where" LINQ method
dotnet_diagnostic.S3267.severity = suggestion

# S3217: Either change the type of 'n' to 'PdfObject' or iterate on a generic collection of type 'PdfNumber'.
dotnet_diagnostic.S3217.severity = suggestion

# MA0094: A class that provides CompareTo(T) should implement IComparable<T>
dotnet_diagnostic.MA0094.severity = suggestion

# S3358 : Extract this nested ternary operation into an independent statement.
dotnet_diagnostic.S3358.severity = suggestion

# S1244 : Do not check floating point equality with exact values, use a range instead.
dotnet_diagnostic.S1244.severity = suggestion

# S2372 : Remove the exception throwing from this property getter, or refactor the property into a method.
dotnet_diagnostic.S2372.severity = suggestion

# S3626: Remove this redundant jump.
dotnet_diagnostic.S3626.severity = suggestion

# S1751 : Refactor the containing loop to do more than one iteration.
dotnet_diagnostic.S1751.severity = suggestion

# S2234 : Parameters to 'SetColumn' have the same names but not the same order as the method arguments.
dotnet_diagnostic.S2234.severity = suggestion

# S3885 : Replace this call to 'Assembly.LoadFrom' with 'Assembly.Load'.
dotnet_diagnostic.S3885.severity = suggestion

# S3218 : Rename this method to not shadow the outer class' member with the same name.
dotnet_diagnostic.S3218.severity = suggestion

# force file scoped namespaces
csharp_style_namespace_declarations = file_scoped:error